Escaped mutants:
================

1) /var/www/html/src/Account/Application/CreateUserService.php:73    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $passwordToken = $this->passwordTokenRepository->getByToken($token, new \DateTimeImmutable('now'));
         if (null === $passwordToken) {
-            throw new TokenNotFoundException();
+            new TokenNotFoundException();
         }
         try {
             $passwordToken->verify();


2) /var/www/html/src/Account/Application/CreateUserService.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             throw new TokenNotFoundException();
         }
         try {
-            $passwordToken->verify();
+            
             $user = $passwordToken->getUser();
             $this->passwordTokenRepository->save($passwordToken);
             $this->userRepository->save($user);


3) /var/www/html/src/Account/Domain/PasswordToken.php:82    [M] LessThan

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return $this->expiredAt !== null && $this->expiredAt <= $now;
     }
     /**
      * @throws RandomException


4) /var/www/html/src/Account/Domain/User.php:212    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', ...self::TOTP_CONFIGURATION);
+        return new TotpConfiguration('' ?? $this->totpSecret?->getSecret(), ...self::TOTP_CONFIGURATION);
     }
     /**
      * @see UserInterface


5) /var/www/html/src/Account/Domain/User.php:320    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         if (!$this->passwordTokens->contains($passwordToken)) {
             $this->passwordTokens[] = $passwordToken;
-            $passwordToken->setUser($this);
+            
         }
         return $this;
     }


6) /var/www/html/src/Account/Domain/User.php:353    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->isTokenSame($token) && $passwordToken->isActive(new \DateTimeImmutable())) {
+            if ($passwordToken->isTokenSame($token) || $passwordToken->isActive(new \DateTimeImmutable())) {
                 return true;
             }
         }


7) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:59    [M] CastString

--- Original
+++ New
@@ @@
             throw new PasswordRequiredException();
         }
         $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $email);
-        return new Passport(new UserBadge($email), new PasswordCredentials($password), [new CsrfTokenBadge('authenticate', (string) $request->request->get('_csrf_token')), new RememberMeBadge()]);
+        return new Passport(new UserBadge($email), new PasswordCredentials($password), [new CsrfTokenBadge('authenticate', $request->request->get('_csrf_token')), new RememberMeBadge()]);
     }
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {


8) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:20    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $user = $this->getUser();
         $error = $authenticationUtils->getLastAuthenticationError();
-        if (null === $error && $user && false === $user->isVerified()) {
+        if ((null === $error || $user) && false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
         if ($user && $user->isAdmin() && $user->isVerified()) {


9) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:20    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $user = $this->getUser();
         $error = $authenticationUtils->getLastAuthenticationError();
-        if (null === $error && $user && false === $user->isVerified()) {
+        if (null === $error && $user || false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
         if ($user && $user->isAdmin() && $user->isVerified()) {


10) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:24    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (null === $error && $user && false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
-        if ($user && $user->isAdmin() && $user->isVerified()) {
+        if (($user || $user->isAdmin()) && $user->isVerified()) {
             return $this->redirectToRoute(AccountAuthenticatorService::DASHBOARD_ROUTE);
         }
         $lastUsername = $authenticationUtils->getLastUsername();


11) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:24    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (null === $error && $user && false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
-        if ($user && $user->isAdmin() && $user->isVerified()) {
+        if ($user && $user->isAdmin() || $user->isVerified()) {
             return $this->redirectToRoute(AccountAuthenticatorService::DASHBOARD_ROUTE);
         }
         $lastUsername = $authenticationUtils->getLastUsername();


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================
