Escaped mutants:
================

1) /var/www/html/src/Account/Domain/User.php:90    [M] Ternary

--- Original
+++ New
@@ @@
     private Collection $passwordTokens;
     public function __construct(Uuid $id = null)
     {
-        $this->id = $id ?: Uuid::v4();
+        $this->id = $id ? Uuid::v4() : $id;
         $this->passwordTokens = new ArrayCollection();
     }
     public function __toString(): string


2) /var/www/html/src/Account/Ui/Authentication/ForgotPassword/ForgotPasswordController.php:30    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->resetPasswordService->processResetPasswordSendEmail($email);
                 $this->flasher->success('dashboard.authentication.resetPassword.email.sent.description', 'dashboard.authentication.resetPassword.email.sent.title');
                 return $this->redirectToRoute('app_login');
-            } catch (CannotSendEmailException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.email.error.cannotSendEmail.title');
             } catch (TokenGeneratingFailedException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.email.error.tokenGenerating.title');
             } catch (EmailRequiredException $exception) {


3) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:20    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $user = $this->getUser();
         $error = $authenticationUtils->getLastAuthenticationError();
-        if (null === $error && $user && false === $user->isVerified()) {
+        if ((null === $error || $user) && false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
         if ($user && $user->isAdmin() && $user->isVerified()) {


4) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:20    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $user = $this->getUser();
         $error = $authenticationUtils->getLastAuthenticationError();
-        if (null === $error && $user && false === $user->isVerified()) {
+        if (null === $error && $user || false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
         if ($user && $user->isAdmin() && $user->isVerified()) {


5) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:24    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (null === $error && $user && false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
-        if ($user && $user->isAdmin() && $user->isVerified()) {
+        if (($user || $user->isAdmin()) && $user->isVerified()) {
             return $this->redirectToRoute(AccountAuthenticatorService::DASHBOARD_ROUTE);
         }
         $lastUsername = $authenticationUtils->getLastUsername();


6) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:24    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (null === $error && $user && false === $user->isVerified()) {
             $flasher->error('dashboard.authentication.login.verifyEmail');
         }
-        if ($user && $user->isAdmin() && $user->isVerified()) {
+        if ($user && $user->isAdmin() || $user->isVerified()) {
             return $this->redirectToRoute(AccountAuthenticatorService::DASHBOARD_ROUTE);
         }
         $lastUsername = $authenticationUtils->getLastUsername();


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /var/www/html/src/Account/Application/AccountAuthenticatorService.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public function __construct(private readonly UrlGeneratorInterface $urlGenerator, private readonly UserRepositoryInterface $userRepository)
     {
     }
-    public function getLoginUrl(): string
+    protected function getLoginUrl(): string
     {
         return $this->urlGenerator->generate(self::LOGIN_ROUTE);
     }


2) /var/www/html/src/Account/Application/AccountAuthenticatorService.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->urlGenerator->generate(self::LOGIN_ROUTE);
     }
-    public function getPanelDashboardUrl(): string
+    protected function getPanelDashboardUrl(): string
     {
         return $this->urlGenerator->generate(self::DASHBOARD_ROUTE);
     }


3) /var/www/html/src/Account/Application/AccountAuthenticatorService.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->urlGenerator->generate(self::DASHBOARD_ROUTE);
     }
-    public function isVerified(Request $request): bool
+    protected function isVerified(Request $request): bool
     {
         $email = $request->request->all('login_form')['email'] ?? '';
         $user = $this->userRepository->getByEmail($email);


4) /var/www/html/src/Account/Application/AccountAuthenticatorService.php:33    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     public function isVerified(Request $request): bool
     {
-        $email = $request->request->all('login_form')['email'] ?? '';
+        $email = '' ?? $request->request->all('login_form')['email'];
         $user = $this->userRepository->getByEmail($email);
         return (bool) $user?->isVerified();
     }
 }


5) /var/www/html/src/Account/Application/AccountAuthenticatorService.php:36    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
     {
         $email = $request->request->all('login_form')['email'] ?? '';
         $user = $this->userRepository->getByEmail($email);
-        return (bool) $user?->isVerified();
+        return (bool) $user->isVerified();
     }
 }


6) /var/www/html/src/Account/Application/AccountAuthenticatorService.php:36    [M] CastBool

--- Original
+++ New
@@ @@
     {
         $email = $request->request->all('login_form')['email'] ?? '';
         $user = $this->userRepository->getByEmail($email);
-        return (bool) $user?->isVerified();
+        return $user?->isVerified();
     }
 }


7) /var/www/html/src/Account/Application/AccountMailerService.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws CannotSendEmailException
      */
-    public function sendRegistrationConfirmationEmail(string $email, PasswordToken $passwordToken): void
+    protected function sendRegistrationConfirmationEmail(string $email, PasswordToken $passwordToken): void
     {
         $this->sendEmailToUser($email, 'dashboard.authentication.register.confirmation.title', 'dashboard/authentication/registration/confirmation-email-template.html.twig', ['token' => $passwordToken->getToken()], 'An error occurred while sending registration confirmation email.');
     }


8) /var/www/html/src/Account/Application/AccountMailerService.php:29    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function sendRegistrationConfirmationEmail(string $email, PasswordToken $passwordToken): void
     {
-        $this->sendEmailToUser($email, 'dashboard.authentication.register.confirmation.title', 'dashboard/authentication/registration/confirmation-email-template.html.twig', ['token' => $passwordToken->getToken()], 'An error occurred while sending registration confirmation email.');
+        
     }
     /**
      * @throws CannotSendEmailException


9) /var/www/html/src/Account/Application/AccountMailerService.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function sendRegistrationConfirmationEmail(string $email, PasswordToken $passwordToken): void
     {
-        $this->sendEmailToUser($email, 'dashboard.authentication.register.confirmation.title', 'dashboard/authentication/registration/confirmation-email-template.html.twig', ['token' => $passwordToken->getToken()], 'An error occurred while sending registration confirmation email.');
+        $this->sendEmailToUser($email, 'dashboard.authentication.register.confirmation.title', 'dashboard/authentication/registration/confirmation-email-template.html.twig', [], 'An error occurred while sending registration confirmation email.');
     }
     /**
      * @throws CannotSendEmailException


10) /var/www/html/src/Account/Application/AccountMailerService.php:34    [M] ArrayItem

--- Original
+++ New
@@ @@
      */
     public function sendRegistrationConfirmationEmail(string $email, PasswordToken $passwordToken): void
     {
-        $this->sendEmailToUser($email, 'dashboard.authentication.register.confirmation.title', 'dashboard/authentication/registration/confirmation-email-template.html.twig', ['token' => $passwordToken->getToken()], 'An error occurred while sending registration confirmation email.');
+        $this->sendEmailToUser($email, 'dashboard.authentication.register.confirmation.title', 'dashboard/authentication/registration/confirmation-email-template.html.twig', ['token' > $passwordToken->getToken()], 'An error occurred while sending registration confirmation email.');
     }
     /**
      * @throws CannotSendEmailException


11) /var/www/html/src/Account/Application/AccountMailerService.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws CannotSendEmailException
      */
-    public function sendResetPasswordEmail(string $email, PasswordToken $passwordToken): void
+    protected function sendResetPasswordEmail(string $email, PasswordToken $passwordToken): void
     {
         $this->sendEmailToUser($email, 'dashboard.authentication.resetPassword.title', 'dashboard/authentication/resetPassword/reset-password-email-template.html.twig', ['token' => $passwordToken->getToken(), 'emailValue' => $email], 'An error occurred while sending reset password email.');
     }


12) /var/www/html/src/Account/Application/AccountMailerService.php:45    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function sendResetPasswordEmail(string $email, PasswordToken $passwordToken): void
     {
-        $this->sendEmailToUser($email, 'dashboard.authentication.resetPassword.title', 'dashboard/authentication/resetPassword/reset-password-email-template.html.twig', ['token' => $passwordToken->getToken(), 'emailValue' => $email], 'An error occurred while sending reset password email.');
+        
     }
     /**
      * @param array<string, mixed> $context


13) /var/www/html/src/Account/Application/AccountMailerService.php:49    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
      */
     public function sendResetPasswordEmail(string $email, PasswordToken $passwordToken): void
     {
-        $this->sendEmailToUser($email, 'dashboard.authentication.resetPassword.title', 'dashboard/authentication/resetPassword/reset-password-email-template.html.twig', ['token' => $passwordToken->getToken(), 'emailValue' => $email], 'An error occurred while sending reset password email.');
+        $this->sendEmailToUser($email, 'dashboard.authentication.resetPassword.title', 'dashboard/authentication/resetPassword/reset-password-email-template.html.twig', ['emailValue' => $email], 'An error occurred while sending reset password email.');
     }
     /**
      * @param array<string, mixed> $context


14) /var/www/html/src/Account/Application/AccountMailerService.php:50    [M] ArrayItem

--- Original
+++ New
@@ @@
      */
     public function sendResetPasswordEmail(string $email, PasswordToken $passwordToken): void
     {
-        $this->sendEmailToUser($email, 'dashboard.authentication.resetPassword.title', 'dashboard/authentication/resetPassword/reset-password-email-template.html.twig', ['token' => $passwordToken->getToken(), 'emailValue' => $email], 'An error occurred while sending reset password email.');
+        $this->sendEmailToUser($email, 'dashboard.authentication.resetPassword.title', 'dashboard/authentication/resetPassword/reset-password-email-template.html.twig', ['token' > $passwordToken->getToken(), 'emailValue' => $email], 'An error occurred while sending reset password email.');
     }
     /**
      * @param array<string, mixed> $context


15) /var/www/html/src/Account/Application/AccountMailerService.php:69    [M] LogicalOr

--- Original
+++ New
@@ @@
      */
     private function sendEmailToUser(string $email, string $title, string $twigTemplatePath, array $context = [], string $logReason = 'An error occurred while sending email.'): void
     {
-        if (empty($this->companyEmail) || empty($this->companyName)) {
+        if (empty($this->companyEmail) && empty($this->companyName)) {
             throw new \LogicException('Company data is missing, please check CT_NAME, CT_EMAIL env configuration variables.');
         }
         $context['companyName'] = $this->companyName;


16) /var/www/html/src/Account/Application/AccountMailerService.php:69    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
      */
     private function sendEmailToUser(string $email, string $title, string $twigTemplatePath, array $context = [], string $logReason = 'An error occurred while sending email.'): void
     {
-        if (empty($this->companyEmail) || empty($this->companyName)) {
+        if (!empty($this->companyEmail) || !empty($this->companyName)) {
             throw new \LogicException('Company data is missing, please check CT_NAME, CT_EMAIL env configuration variables.');
         }
         $context['companyName'] = $this->companyName;


17) /var/www/html/src/Account/Application/AccountMailerService.php:69    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
      */
     private function sendEmailToUser(string $email, string $title, string $twigTemplatePath, array $context = [], string $logReason = 'An error occurred while sending email.'): void
     {
-        if (empty($this->companyEmail) || empty($this->companyName)) {
+        if (!(empty($this->companyEmail) || empty($this->companyName))) {
             throw new \LogicException('Company data is missing, please check CT_NAME, CT_EMAIL env configuration variables.');
         }
         $context['companyName'] = $this->companyName;


18) /var/www/html/src/Account/Application/AccountMailerService.php:70    [M] Throw_

--- Original
+++ New
@@ @@
     private function sendEmailToUser(string $email, string $title, string $twigTemplatePath, array $context = [], string $logReason = 'An error occurred while sending email.'): void
     {
         if (empty($this->companyEmail) || empty($this->companyName)) {
-            throw new \LogicException('Company data is missing, please check CT_NAME, CT_EMAIL env configuration variables.');
+            new \LogicException('Company data is missing, please check CT_NAME, CT_EMAIL env configuration variables.');
         }
         $context['companyName'] = $this->companyName;
         /** @infection-ignore-all  */


19) /var/www/html/src/Account/Application/AccountMailerService.php:83    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         /** @infection-ignore-all  */
         $email = (new TemplatedEmail())->from(new Address($this->companyEmail, $this->companyName))->to(new Address($email))->subject($this->translator->trans($title))->htmlTemplate($twigTemplatePath)->context($context);
         try {
-            $this->mailer->send($email);
+            
         } catch (\Throwable $exception) {
             $this->logger->critical($logReason, ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
             throw new CannotSendEmailException();


20) /var/www/html/src/Account/Application/AccountMailerService.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         try {
             $this->mailer->send($email);
         } catch (\Throwable $exception) {
-            $this->logger->critical($logReason, ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
+            
             throw new CannotSendEmailException();
         }
     }
 }


21) /var/www/html/src/Account/Application/AccountMailerService.php:87    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         try {
             $this->mailer->send($email);
         } catch (\Throwable $exception) {
-            $this->logger->critical($logReason, ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
+            $this->logger->critical($logReason, ['email' => $email, 'class' => __CLASS__]);
             throw new CannotSendEmailException();
         }
     }
 }


22) /var/www/html/src/Account/Application/AccountMailerService.php:93    [M] Throw_

--- Original
+++ New
@@ @@
             $this->mailer->send($email);
         } catch (\Throwable $exception) {
             $this->logger->critical($logReason, ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
-            throw new CannotSendEmailException();
+            new CannotSendEmailException();
         }
     }
 }


23) /var/www/html/src/Account/Application/CreateUserService.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws CreateNewUserException
      */
-    public function createUser(string $email, string $password, bool $sendConfirmationEmail = true): User
+    protected function createUser(string $email, string $password, bool $sendConfirmationEmail = true): User
     {
         $this->entityManager->beginTransaction();
         try {


24) /var/www/html/src/Account/Application/CreateUserService.php:34    [M] TrueValue

--- Original
+++ New
@@ @@
     /**
      * @throws CreateNewUserException
      */
-    public function createUser(string $email, string $password, bool $sendConfirmationEmail = true): User
+    public function createUser(string $email, string $password, bool $sendConfirmationEmail = false): User
     {
         $this->entityManager->beginTransaction();
         try {


25) /var/www/html/src/Account/Application/CreateUserService.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function createUser(string $email, string $password, bool $sendConfirmationEmail = true): User
     {
-        $this->entityManager->beginTransaction();
+        
         try {
             $user = $this->userFactory->create($email, $password);
             $this->userRepository->save($user);


26) /var/www/html/src/Account/Application/CreateUserService.php:39    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->entityManager->beginTransaction();
         try {
             $user = $this->userFactory->create($email, $password);
-            $this->userRepository->save($user);
+            
             if ($sendConfirmationEmail) {
                 $this->accountMailerService->sendRegistrationConfirmationEmail($email, $this->tokenService->generateTokenForVerifyAccount($user));
             }


27) /var/www/html/src/Account/Application/CreateUserService.php:41    [M] IfNegation

--- Original
+++ New
@@ @@
         try {
             $user = $this->userFactory->create($email, $password);
             $this->userRepository->save($user);
-            if ($sendConfirmationEmail) {
+            if (!$sendConfirmationEmail) {
                 $this->accountMailerService->sendRegistrationConfirmationEmail($email, $this->tokenService->generateTokenForVerifyAccount($user));
             }
             $this->entityManager->commit();


28) /var/www/html/src/Account/Application/CreateUserService.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user = $this->userFactory->create($email, $password);
             $this->userRepository->save($user);
             if ($sendConfirmationEmail) {
-                $this->accountMailerService->sendRegistrationConfirmationEmail($email, $this->tokenService->generateTokenForVerifyAccount($user));
+                
             }
             $this->entityManager->commit();
         } catch (\Throwable $e) {


29) /var/www/html/src/Account/Application/CreateUserService.php:47    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($sendConfirmationEmail) {
                 $this->accountMailerService->sendRegistrationConfirmationEmail($email, $this->tokenService->generateTokenForVerifyAccount($user));
             }
-            $this->entityManager->commit();
+            
         } catch (\Throwable $e) {
             $this->entityManager->rollback();
             $this->logger->error('An error occurred while creating a new user.', ['exception' => $e, 'email' => $email, 'class' => __CLASS__]);


30) /var/www/html/src/Account/Application/CreateUserService.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $this->entityManager->commit();
         } catch (\Throwable $e) {
-            $this->entityManager->rollback();
+            
             $this->logger->error('An error occurred while creating a new user.', ['exception' => $e, 'email' => $email, 'class' => __CLASS__]);
             throw new CreateNewUserException();
         }


31) /var/www/html/src/Account/Application/CreateUserService.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->entityManager->commit();
         } catch (\Throwable $e) {
             $this->entityManager->rollback();
-            $this->logger->error('An error occurred while creating a new user.', ['exception' => $e, 'email' => $email, 'class' => __CLASS__]);
+            
             throw new CreateNewUserException();
         }
         return $user;


32) /var/www/html/src/Account/Application/CreateUserService.php:52    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->entityManager->commit();
         } catch (\Throwable $e) {
             $this->entityManager->rollback();
-            $this->logger->error('An error occurred while creating a new user.', ['exception' => $e, 'email' => $email, 'class' => __CLASS__]);
+            $this->logger->error('An error occurred while creating a new user.', ['email' => $email, 'class' => __CLASS__]);
             throw new CreateNewUserException();
         }
         return $user;


33) /var/www/html/src/Account/Application/CreateUserService.php:59    [M] Throw_

--- Original
+++ New
@@ @@
         } catch (\Throwable $e) {
             $this->entityManager->rollback();
             $this->logger->error('An error occurred while creating a new user.', ['exception' => $e, 'email' => $email, 'class' => __CLASS__]);
-            throw new CreateNewUserException();
+            new CreateNewUserException();
         }
         return $user;
     }


34) /var/www/html/src/Account/Application/CreateUserService.php:69    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws TokenNotFoundException
      */
-    public function setAsVerified(string $token): User
+    protected function setAsVerified(string $token): User
     {
         try {
             $passwordToken = $this->passwordTokenRepository->getByToken($token, new \DateTimeImmutable('now'));


35) /var/www/html/src/Account/Application/CreateUserService.php:74    [M] Identical

--- Original
+++ New
@@ @@
     {
         try {
             $passwordToken = $this->passwordTokenRepository->getByToken($token, new \DateTimeImmutable('now'));
-            if (null === $passwordToken) {
+            if (null !== $passwordToken) {
                 throw new TokenNotFoundException();
             }
             $passwordToken->setAsVerified();


36) /var/www/html/src/Account/Application/CreateUserService.php:75    [M] Throw_

--- Original
+++ New
@@ @@
         try {
             $passwordToken = $this->passwordTokenRepository->getByToken($token, new \DateTimeImmutable('now'));
             if (null === $passwordToken) {
-                throw new TokenNotFoundException();
+                new TokenNotFoundException();
             }
             $passwordToken->setAsVerified();
             $user = $passwordToken->getUser();


37) /var/www/html/src/Account/Application/CreateUserService.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if (null === $passwordToken) {
                 throw new TokenNotFoundException();
             }
-            $passwordToken->setAsVerified();
+            
             $user = $passwordToken->getUser();
             $this->passwordTokenRepository->save($passwordToken);
             $this->userRepository->save($user);


38) /var/www/html/src/Account/Application/CreateUserService.php:79    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $passwordToken->setAsVerified();
             $user = $passwordToken->getUser();
-            $this->passwordTokenRepository->save($passwordToken);
+            
             $this->userRepository->save($user);
             return $user;
         } catch (\Throwable $exception) {


39) /var/www/html/src/Account/Application/CreateUserService.php:80    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $passwordToken->setAsVerified();
             $user = $passwordToken->getUser();
             $this->passwordTokenRepository->save($passwordToken);
-            $this->userRepository->save($user);
+            
             return $user;
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while deactivating password token.', ['exception' => $exception, 'token' => $token, 'class' => __CLASS__]);


40) /var/www/html/src/Account/Application/CreateUserService.php:84    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->userRepository->save($user);
             return $user;
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while deactivating password token.', ['exception' => $exception, 'token' => $token, 'class' => __CLASS__]);
+            
             throw new TokenNotFoundException();
         }
     }
 }


41) /var/www/html/src/Account/Application/CreateUserService.php:86    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->userRepository->save($user);
             return $user;
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while deactivating password token.', ['exception' => $exception, 'token' => $token, 'class' => __CLASS__]);
+            $this->logger->error('An error occurred while deactivating password token.', ['token' => $token, 'class' => __CLASS__]);
             throw new TokenNotFoundException();
         }
     }
 }


42) /var/www/html/src/Account/Application/CreateUserService.php:93    [M] Throw_

--- Original
+++ New
@@ @@
             return $user;
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while deactivating password token.', ['exception' => $exception, 'token' => $token, 'class' => __CLASS__]);
-            throw new TokenNotFoundException();
+            new TokenNotFoundException();
         }
     }
 }


43) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @throws CannotSendEmailException
      * @throws TokenGeneratingFailedException
      */
-    public function processResetPasswordSendEmail(string $email): void
+    protected function processResetPasswordSendEmail(string $email): void
     {
         $user = $this->userRepository->getByEmail($email);
         if (null !== $user) {


44) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:33    [M] NotIdentical

--- Original
+++ New
@@ @@
     public function processResetPasswordSendEmail(string $email): void
     {
         $user = $this->userRepository->getByEmail($email);
-        if (null !== $user) {
+        if (null === $user) {
             $passwordToken = $this->passwordTokenService->generateTokenForResetPassword($user);
             $this->accountMailerService->sendResetPasswordEmail($email, $passwordToken);
         }


45) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $user = $this->userRepository->getByEmail($email);
         if (null !== $user) {
             $passwordToken = $this->passwordTokenService->generateTokenForResetPassword($user);
-            $this->accountMailerService->sendResetPasswordEmail($email, $passwordToken);
+            
         }
     }
     /**


46) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @throws UserNotFoundException
      * @throws TokenNotFoundException
      */
-    public function resetPassword(string $token, string $email, string $password): void
+    protected function resetPassword(string $token, string $email, string $password): void
     {
         $user = $this->userRepository->getByEmail($email);
         if (null === $user) {


47) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:49    [M] Identical

--- Original
+++ New
@@ @@
     public function resetPassword(string $token, string $email, string $password): void
     {
         $user = $this->userRepository->getByEmail($email);
-        if (null === $user) {
+        if (null !== $user) {
             throw new UserNotFoundException();
         }
         if ($user->isTokenValid($token)) {


48) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:50    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $user = $this->userRepository->getByEmail($email);
         if (null === $user) {
-            throw new UserNotFoundException();
+            new UserNotFoundException();
         }
         if ($user->isTokenValid($token)) {
             throw new TokenNotFoundException();


49) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:53    [M] IfNegation

--- Original
+++ New
@@ @@
         if (null === $user) {
             throw new UserNotFoundException();
         }
-        if ($user->isTokenValid($token)) {
+        if (!$user->isTokenValid($token)) {
             throw new TokenNotFoundException();
         }
         try {


50) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:54    [M] Throw_

--- Original
+++ New
@@ @@
             throw new UserNotFoundException();
         }
         if ($user->isTokenValid($token)) {
-            throw new TokenNotFoundException();
+            new TokenNotFoundException();
         }
         try {
             $this->passwordManager->updatePassword($user, $password);


51) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:58    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             throw new TokenNotFoundException();
         }
         try {
-            $this->passwordManager->updatePassword($user, $password);
+            
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while resetting password.', ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
             throw new ResetPasswordException();


52) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         try {
             $this->passwordManager->updatePassword($user, $password);
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while resetting password.', ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
+            
             throw new ResetPasswordException();
         }
     }
 }


53) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:62    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         try {
             $this->passwordManager->updatePassword($user, $password);
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while resetting password.', ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
+            $this->logger->error('An error occurred while resetting password.', ['email' => $email, 'class' => __CLASS__]);
             throw new ResetPasswordException();
         }
     }
 }


54) /var/www/html/src/Account/Application/Password/ResetPasswordService.php:68    [M] Throw_

--- Original
+++ New
@@ @@
             $this->passwordManager->updatePassword($user, $password);
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while resetting password.', ['exception' => $exception, 'email' => $email, 'class' => __CLASS__]);
-            throw new ResetPasswordException();
+            new ResetPasswordException();
         }
     }
 }


55) /var/www/html/src/Account/Application/Password/TokenService.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws TokenGeneratingFailedException
      */
-    public function generateTokenForResetPassword(User $user): PasswordToken
+    protected function generateTokenForResetPassword(User $user): PasswordToken
     {
         try {
             $passwordToken = PasswordToken::generateForOneDay($user);


56) /var/www/html/src/Account/Application/Password/TokenService.php:26    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         try {
             $passwordToken = PasswordToken::generateForOneDay($user);
-            $this->passwordTokenRepository->save($passwordToken);
+            
             return $passwordToken;
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);


57) /var/www/html/src/Account/Application/Password/TokenService.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->passwordTokenRepository->save($passwordToken);
             return $passwordToken;
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);
+            
             throw new TokenGeneratingFailedException();
         }
     }


58) /var/www/html/src/Account/Application/Password/TokenService.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->passwordTokenRepository->save($passwordToken);
             return $passwordToken;
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);
+            $this->logger->error('An error occurred while generating password token.', ['user' => $user, 'class' => __CLASS__]);
             throw new TokenGeneratingFailedException();
         }
     }


59) /var/www/html/src/Account/Application/Password/TokenService.php:38    [M] Throw_

--- Original
+++ New
@@ @@
             return $passwordToken;
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);
-            throw new TokenGeneratingFailedException();
+            new TokenGeneratingFailedException();
         }
     }
     /**


60) /var/www/html/src/Account/Application/Password/TokenService.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws TokenGeneratingFailedException
      */
-    public function generateTokenForVerifyAccount(User $user): PasswordToken
+    protected function generateTokenForVerifyAccount(User $user): PasswordToken
     {
         try {
             $passwordToken = PasswordToken::generateForMonth($user);


61) /var/www/html/src/Account/Application/Password/TokenService.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         try {
             $passwordToken = PasswordToken::generateForMonth($user);
-            $this->passwordTokenRepository->save($passwordToken);
+            
             return $passwordToken;
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);


62) /var/www/html/src/Account/Application/Password/TokenService.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->passwordTokenRepository->save($passwordToken);
             return $passwordToken;
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);
+            
             throw new TokenGeneratingFailedException();
         }
     }
 }


63) /var/www/html/src/Account/Application/Password/TokenService.php:55    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->passwordTokenRepository->save($passwordToken);
             return $passwordToken;
         } catch (\Throwable $exception) {
-            $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);
+            $this->logger->error('An error occurred while generating password token.', ['user' => $user, 'class' => __CLASS__]);
             throw new TokenGeneratingFailedException();
         }
     }
 }


64) /var/www/html/src/Account/Application/Password/TokenService.php:61    [M] Throw_

--- Original
+++ New
@@ @@
             return $passwordToken;
         } catch (\Throwable $exception) {
             $this->logger->error('An error occurred while generating password token.', ['exception' => $exception, 'user' => $user, 'class' => __CLASS__]);
-            throw new TokenGeneratingFailedException();
+            new TokenGeneratingFailedException();
         }
     }
 }


65) /var/www/html/src/Account/Application/Password/UpdatePasswordService.php:17    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public function __construct(private readonly UserRepositoryInterface $userRepository, private readonly UserPasswordHasherInterface $passwordHasher)
     {
     }
-    public function updatePassword(User $user, string $password): ?string
+    protected function updatePassword(User $user, string $password): ?string
     {
         $passwordHashed = $this->passwordHasher->hashPassword($user, $password);
         $this->userRepository->upgradePassword($user, $passwordHashed);


66) /var/www/html/src/Account/Application/Password/UpdatePasswordService.php:20    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function updatePassword(User $user, string $password): ?string
     {
         $passwordHashed = $this->passwordHasher->hashPassword($user, $password);
-        $this->userRepository->upgradePassword($user, $passwordHashed);
+        
         return $passwordHashed;
     }
 }


67) /var/www/html/src/Account/Domain/PasswordToken.php:47    [M] Coalesce

--- Original
+++ New
@@ @@
     public function __construct(User $user, ?Uuid $id = null, ?string $token = null, ?\DateTimeImmutable $expiredAt = null, ?\DateTimeImmutable $activatedAt = null, ?string $updatedBy = null)
     {
         $this->user = $user;
-        $this->id = $id ?? Uuid::v4();
+        $this->id = Uuid::v4() ?? $id;
         $this->token = $token;
         $this->expiredAt = $expiredAt;
         $this->activatedAt = $activatedAt;


68) /var/www/html/src/Account/Domain/PasswordToken.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->activatedAt = $activatedAt;
         $this->updatedBy = $updatedBy;
     }
-    public function getId(): ?Uuid
+    protected function getId(): ?Uuid
     {
         return $this->id;
     }


69) /var/www/html/src/Account/Domain/PasswordToken.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function getUser(): User
+    protected function getUser(): User
     {
         return $this->user;
     }


70) /var/www/html/src/Account/Domain/PasswordToken.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->user;
     }
-    public function setUser(User $user): self
+    protected function setUser(User $user): self
     {
         $this->user = $user;
         return $this;


71) /var/www/html/src/Account/Domain/PasswordToken.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->user = $user;
         return $this;
     }
-    public function isActive(\DateTimeImmutable $now): bool
+    protected function isActive(\DateTimeImmutable $now): bool
     {
         return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
     }


72) /var/www/html/src/Account/Domain/PasswordToken.php:74    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     public function isActive(\DateTimeImmutable $now): bool
     {
-        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
+        return $this->activatedAt === null && $this->expiredAtIsInThePast($now) === false;
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {


73) /var/www/html/src/Account/Domain/PasswordToken.php:74    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function isActive(\DateTimeImmutable $now): bool
     {
-        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
+        return $this->activatedAt !== null || $this->expiredAtIsInThePast($now) === false;
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {


74) /var/www/html/src/Account/Domain/PasswordToken.php:74    [M] LogicalAndAllSubExprNegation

--- Original
+++ New
@@ @@
     }
     public function isActive(\DateTimeImmutable $now): bool
     {
-        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
+        return !($this->activatedAt !== null) && $this->expiredAtIsInThePast($now) === false;
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {


75) /var/www/html/src/Account/Domain/PasswordToken.php:74    [M] LogicalAndNegation

--- Original
+++ New
@@ @@
     }
     public function isActive(\DateTimeImmutable $now): bool
     {
-        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
+        return !($this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false);
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {


76) /var/www/html/src/Account/Domain/PasswordToken.php:75    [M] FalseValue

--- Original
+++ New
@@ @@
     }
     public function isActive(\DateTimeImmutable $now): bool
     {
-        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
+        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === true;
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {


77) /var/www/html/src/Account/Domain/PasswordToken.php:75    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function isActive(\DateTimeImmutable $now): bool
     {
-        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
+        return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) !== false;
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {


78) /var/www/html/src/Account/Domain/PasswordToken.php:78    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->activatedAt !== null && $this->expiredAtIsInThePast($now) === false;
     }
-    public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
+    protected function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
         return $this->expiredAt !== null && $this->expiredAt < $now;
     }


79) /var/www/html/src/Account/Domain/PasswordToken.php:80    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return $this->expiredAt === null && $this->expiredAt < $now;
     }
     /**
      * @throws RandomException


80) /var/www/html/src/Account/Domain/PasswordToken.php:80    [M] LessThan

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return $this->expiredAt !== null && $this->expiredAt <= $now;
     }
     /**
      * @throws RandomException


81) /var/www/html/src/Account/Domain/PasswordToken.php:80    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return $this->expiredAt !== null && $this->expiredAt >= $now;
     }
     /**
      * @throws RandomException


82) /var/www/html/src/Account/Domain/PasswordToken.php:80    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return $this->expiredAt !== null || $this->expiredAt < $now;
     }
     /**
      * @throws RandomException


83) /var/www/html/src/Account/Domain/PasswordToken.php:80    [M] LogicalAndAllSubExprNegation

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return !($this->expiredAt !== null) && !($this->expiredAt < $now);
     }
     /**
      * @throws RandomException


84) /var/www/html/src/Account/Domain/PasswordToken.php:80    [M] LogicalAndNegation

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInThePast(\DateTimeImmutable $now): bool
     {
-        return $this->expiredAt !== null && $this->expiredAt < $now;
+        return !($this->expiredAt !== null && $this->expiredAt < $now);
     }
     /**
      * @throws RandomException


85) /var/www/html/src/Account/Domain/PasswordToken.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws RandomException
      */
-    public static function generateForMonth(User $user): self
+    protected static function generateForMonth(User $user): self
     {
         return PasswordToken::generateForDate($user, '+1 month');
     }


86) /var/www/html/src/Account/Domain/PasswordToken.php:94    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @throws RandomException
      */
-    public static function generateForOneDay(User $user): self
+    protected static function generateForOneDay(User $user): self
     {
         return PasswordToken::generateForDate($user, '+1 day');
     }


87) /var/www/html/src/Account/Domain/PasswordToken.php:103    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @throws RandomException
      * @throws \Exception
      */
-    public static function generateForDate(User $user, string $date): self
+    protected static function generateForDate(User $user, string $date): self
     {
         $token = bin2hex(random_bytes(32));
         $expiredAt = new \DateTimeImmutable($date);


88) /var/www/html/src/Account/Domain/PasswordToken.php:105    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     public static function generateForDate(User $user, string $date): self
     {
-        $token = bin2hex(random_bytes(32));
+        $token = bin2hex(random_bytes(31));
         $expiredAt = new \DateTimeImmutable($date);
         return new self($user, token: $token, expiredAt: $expiredAt);
     }


89) /var/www/html/src/Account/Domain/PasswordToken.php:105    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     public static function generateForDate(User $user, string $date): self
     {
-        $token = bin2hex(random_bytes(32));
+        $token = bin2hex(random_bytes(33));
         $expiredAt = new \DateTimeImmutable($date);
         return new self($user, token: $token, expiredAt: $expiredAt);
     }


90) /var/www/html/src/Account/Domain/PasswordToken.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $expiredAt = new \DateTimeImmutable($date);
         return new self($user, token: $token, expiredAt: $expiredAt);
     }
-    public function getToken(): ?string
+    protected function getToken(): ?string
     {
         return $this->token;
     }


91) /var/www/html/src/Account/Domain/PasswordToken.php:116    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->token;
     }
-    public function setAsVerified(string $activatedBy = 'system'): self
+    protected function setAsVerified(string $activatedBy = 'system'): self
     {
         $this->activatedAt = new \DateTimeImmutable('now');
         $this->updatedBy = $activatedBy;


92) /var/www/html/src/Account/Domain/PasswordToken.php:120    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->activatedAt = new \DateTimeImmutable('now');
         $this->updatedBy = $activatedBy;
-        $this->user->verify();
+        
         return $this;
     }
     public function getUpdatedBy(): ?string


93) /var/www/html/src/Account/Domain/PasswordToken.php:125    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->user->verify();
         return $this;
     }
-    public function getUpdatedBy(): ?string
+    protected function getUpdatedBy(): ?string
     {
         return $this->updatedBy;
     }
 }


94) /var/www/html/src/Account/Domain/User.php:104    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->id;
     }
-    public function setId(?Uuid $id): self
+    protected function setId(?Uuid $id): self
     {
         $this->id = $id;
         return $this;


95) /var/www/html/src/Account/Domain/User.php:116    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->email;
     }
-    public function setEmail(string $email): self
+    protected function setEmail(string $email): self
     {
         $this->email = $email;
         return $this;


96) /var/www/html/src/Account/Domain/User.php:144    [M] UnwrapArrayUnique

--- Original
+++ New
@@ @@
         $actualRoles = $this->roles;
         // guarantee every user at least has ROLE_USER
         $actualRoles[] = RoleEnum::USER->value;
-        return array_unique($actualRoles);
+        return $actualRoles;
     }
     /**
      * @param string[] $roles


97) /var/www/html/src/Account/Domain/User.php:150    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @param string[] $roles
      */
-    public function setRoles(array $roles): self
+    protected function setRoles(array $roles): self
     {
         $this->roles = $roles;
         return $this;


98) /var/www/html/src/Account/Domain/User.php:165    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->password;
     }
-    public function setPassword(?string $password): self
+    protected function setPassword(?string $password): self
     {
         $this->password = $password;
         return $this;


99) /var/www/html/src/Account/Domain/User.php:172    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->password = $password;
         return $this;
     }
-    public function getActualPassword(): ?string
+    protected function getActualPassword(): ?string
     {
         return $this->actualPassword;
     }


100) /var/www/html/src/Account/Domain/User.php:177    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->actualPassword;
     }
-    public function setActualPassword(string $actualPassword): self
+    protected function setActualPassword(string $actualPassword): self
     {
         $this->actualPassword = $actualPassword;
         return $this;


101) /var/www/html/src/Account/Domain/User.php:184    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->actualPassword = $actualPassword;
         return $this;
     }
-    public function setTotpSecret(TotpSecret $totpSecret): self
+    protected function setTotpSecret(TotpSecret $totpSecret): self
     {
         $this->totpSecret = $totpSecret;
         return $this;


102) /var/www/html/src/Account/Domain/User.php:193    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
     }
     public function isTotpAuthenticationEnabled(): bool
     {
-        return (bool) $this->totpSecret?->isEnable();
+        return (bool) $this->totpSecret->isEnable();
     }
     public function getTotpAuthenticationUsername(): string
     {


103) /var/www/html/src/Account/Domain/User.php:193    [M] CastBool

--- Original
+++ New
@@ @@
     }
     public function isTotpAuthenticationEnabled(): bool
     {
-        return (bool) $this->totpSecret?->isEnable();
+        return $this->totpSecret?->isEnable();
     }
     public function getTotpAuthenticationUsername(): string
     {


104) /var/www/html/src/Account/Domain/User.php:203    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return new TotpConfiguration($this->totpSecret->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
     }
     /**
      * @see UserInterface


105) /var/www/html/src/Account/Domain/User.php:203    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return new TotpConfiguration('' ?? $this->totpSecret?->getSecret(), TotpConfiguration::ALGORITHM_SHA1, 30, 6);
     }
     /**
      * @see UserInterface


106) /var/www/html/src/Account/Domain/User.php:203    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 29, 6);
     }
     /**
      * @see UserInterface


107) /var/www/html/src/Account/Domain/User.php:203    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 31, 6);
     }
     /**
      * @see UserInterface


108) /var/www/html/src/Account/Domain/User.php:203    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 5);
     }
     /**
      * @see UserInterface


109) /var/www/html/src/Account/Domain/User.php:203    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 7);
     }
     /**
      * @see UserInterface


110) /var/www/html/src/Account/Domain/User.php:203    [M] NewObject

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        new TotpConfiguration($this->totpSecret?->getSecret() ?? '', TotpConfiguration::ALGORITHM_SHA1, 30, 6);
+        return null;
     }
     /**
      * @see UserInterface


111) /var/www/html/src/Account/Domain/User.php:228    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->updatedAt = new \DateTimeImmutable();
         }
     }
-    public function getAvatarFile(): ?File
+    protected function getAvatarFile(): ?File
     {
         return $this->avatarFile;
     }


112) /var/www/html/src/Account/Domain/User.php:233    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->avatarFile;
     }
-    public function setAvatar(?string $avatar): void
+    protected function setAvatar(?string $avatar): void
     {
         $this->avatar = $avatar;
     }


113) /var/www/html/src/Account/Domain/User.php:238    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->avatar = $avatar;
     }
-    public function getAvatar(): ?string
+    protected function getAvatar(): ?string
     {
         return $this->avatar;
     }


114) /var/www/html/src/Account/Domain/User.php:243    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->avatar;
     }
-    public function getAvatarUrl(): ?string
+    protected function getAvatarUrl(): ?string
     {
         if (!$this->avatar) {
             return null;


115) /var/www/html/src/Account/Domain/User.php:245    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getAvatarUrl(): ?string
     {
-        if (!$this->avatar) {
+        if ($this->avatar) {
             return null;
         }
         if (str_contains($this->avatar, '/')) {


116) /var/www/html/src/Account/Domain/User.php:249    [M] IfNegation

--- Original
+++ New
@@ @@
         if (!$this->avatar) {
             return null;
         }
-        if (str_contains($this->avatar, '/')) {
+        if (!str_contains($this->avatar, '/')) {
             return $this->avatar;
         }
         return sprintf('/uploads/images/avatars/%s', $this->avatar);


117) /var/www/html/src/Account/Domain/User.php:253    [M] FunctionCall

--- Original
+++ New
@@ @@
         if (str_contains($this->avatar, '/')) {
             return $this->avatar;
         }
-        return sprintf('/uploads/images/avatars/%s', $this->avatar);
+        sprintf('/uploads/images/avatars/%s', $this->avatar);
+        return null;
     }
     public function setAvatarSize(?int $avatarSize): void
     {


118) /var/www/html/src/Account/Domain/User.php:256    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return sprintf('/uploads/images/avatars/%s', $this->avatar);
     }
-    public function setAvatarSize(?int $avatarSize): void
+    protected function setAvatarSize(?int $avatarSize): void
     {
         $this->avatarSize = $avatarSize;
     }


119) /var/www/html/src/Account/Domain/User.php:261    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->avatarSize = $avatarSize;
     }
-    public function getAvatarSize(): ?int
+    protected function getAvatarSize(): ?int
     {
         return $this->avatarSize;
     }


120) /var/www/html/src/Account/Domain/User.php:268    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function __serialize(): array
     {
-        return ['id' => $this->id, 'email' => $this->getEmail(), 'password' => $this->password];
+        return ['email' => $this->getEmail(), 'password' => $this->password];
     }
     public function isSuperAdmin(): bool
     {


121) /var/www/html/src/Account/Domain/User.php:269    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function __serialize(): array
     {
-        return ['id' => $this->id, 'email' => $this->getEmail(), 'password' => $this->password];
+        return ['id' > $this->id, 'email' => $this->getEmail(), 'password' => $this->password];
     }
     public function isSuperAdmin(): bool
     {


122) /var/www/html/src/Account/Domain/User.php:270    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function __serialize(): array
     {
-        return ['id' => $this->id, 'email' => $this->getEmail(), 'password' => $this->password];
+        return ['id' => $this->id, 'email' > $this->getEmail(), 'password' => $this->password];
     }
     public function isSuperAdmin(): bool
     {


123) /var/www/html/src/Account/Domain/User.php:271    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function __serialize(): array
     {
-        return ['id' => $this->id, 'email' => $this->getEmail(), 'password' => $this->password];
+        return ['id' => $this->id, 'email' => $this->getEmail(), 'password' > $this->password];
     }
     public function isSuperAdmin(): bool
     {


124) /var/www/html/src/Account/Domain/User.php:290    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->isVerified;
     }
-    public function setVerified(bool $isVerified): static
+    protected function setVerified(bool $isVerified): static
     {
         $this->isVerified = $isVerified;
         return $this;


125) /var/www/html/src/Account/Domain/User.php:307    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->roles[] = RoleEnum::ADMIN->value;
     }
-    public function addPasswordToken(PasswordToken $passwordToken): self
+    protected function addPasswordToken(PasswordToken $passwordToken): self
     {
         if (!$this->passwordTokens->contains($passwordToken)) {
             $this->passwordTokens[] = $passwordToken;


126) /var/www/html/src/Account/Domain/User.php:309    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function addPasswordToken(PasswordToken $passwordToken): self
     {
-        if (!$this->passwordTokens->contains($passwordToken)) {
+        if ($this->passwordTokens->contains($passwordToken)) {
             $this->passwordTokens[] = $passwordToken;
             $passwordToken->setUser($this);
         }


127) /var/www/html/src/Account/Domain/User.php:311    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         if (!$this->passwordTokens->contains($passwordToken)) {
             $this->passwordTokens[] = $passwordToken;
-            $passwordToken->setUser($this);
+            
         }
         return $this;
     }


128) /var/www/html/src/Account/Domain/User.php:320    [M] PublicVisibility

--- Original
+++ New
@@ @@
     /**
      * @return Collection<int, PasswordToken>
      */
-    public function getPasswordTokens(): Collection
+    protected function getPasswordTokens(): Collection
     {
         return $this->passwordTokens;
     }


129) /var/www/html/src/Account/Domain/User.php:325    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->passwordTokens;
     }
-    public function getActiveToken(\DateTimeImmutable $now): ?PasswordToken
+    protected function getActiveToken(\DateTimeImmutable $now): ?PasswordToken
     {
         foreach ($this->passwordTokens as $passwordToken) {
             if ($passwordToken->isActive($now)) {


130) /var/www/html/src/Account/Domain/User.php:327    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function getActiveToken(\DateTimeImmutable $now): ?PasswordToken
     {
-        foreach ($this->passwordTokens as $passwordToken) {
+        foreach ([] as $passwordToken) {
             if ($passwordToken->isActive($now)) {
                 return $passwordToken;
             }


131) /var/www/html/src/Account/Domain/User.php:328    [M] IfNegation

--- Original
+++ New
@@ @@
     public function getActiveToken(\DateTimeImmutable $now): ?PasswordToken
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->isActive($now)) {
+            if (!$passwordToken->isActive($now)) {
                 return $passwordToken;
             }
         }


132) /var/www/html/src/Account/Domain/User.php:336    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return null;
     }
-    public function addPasswordTokenForOneMonth(): void
+    protected function addPasswordTokenForOneMonth(): void
     {
         $this->addPasswordToken(PasswordToken::generateForMonth($this));
     }


133) /var/www/html/src/Account/Domain/User.php:338    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function addPasswordTokenForOneMonth(): void
     {
-        $this->addPasswordToken(PasswordToken::generateForMonth($this));
+        
     }
     public function isActive(): bool
     {


134) /var/www/html/src/Account/Domain/User.php:341    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->addPasswordToken(PasswordToken::generateForMonth($this));
     }
-    public function isActive(): bool
+    protected function isActive(): bool
     {
         return $this->isVerified;
     }


135) /var/www/html/src/Account/Domain/User.php:346    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->isVerified;
     }
-    public function isTokenValid(string $token): bool
+    protected function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
             if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {


136) /var/www/html/src/Account/Domain/User.php:348    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function isTokenValid(string $token): bool
     {
-        foreach ($this->passwordTokens as $passwordToken) {
+        foreach ([] as $passwordToken) {
             if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
                 return true;
             }


137) /var/www/html/src/Account/Domain/User.php:349    [M] Identical

--- Original
+++ New
@@ @@
     public function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
+            if ($passwordToken->getToken() !== $token && $passwordToken->isActive(new \DateTimeImmutable())) {
                 return true;
             }
         }


138) /var/www/html/src/Account/Domain/User.php:349    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
+            if ($passwordToken->getToken() === $token || $passwordToken->isActive(new \DateTimeImmutable())) {
                 return true;
             }
         }


139) /var/www/html/src/Account/Domain/User.php:349    [M] LogicalAndAllSubExprNegation

--- Original
+++ New
@@ @@
     public function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
+            if (!($passwordToken->getToken() === $token) && !$passwordToken->isActive(new \DateTimeImmutable())) {
                 return true;
             }
         }


140) /var/www/html/src/Account/Domain/User.php:349    [M] LogicalAndNegation

--- Original
+++ New
@@ @@
     public function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
+            if (!($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable()))) {
                 return true;
             }
         }


141) /var/www/html/src/Account/Domain/User.php:349    [M] LogicalAndSingleSubExprNegation

--- Original
+++ New
@@ @@
     public function isTokenValid(string $token): bool
     {
         foreach ($this->passwordTokens as $passwordToken) {
-            if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
+            if ($passwordToken->getToken() === $token && !$passwordToken->isActive(new \DateTimeImmutable())) {
                 return true;
             }
         }


142) /var/www/html/src/Account/Domain/User.php:352    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         foreach ($this->passwordTokens as $passwordToken) {
             if ($passwordToken->getToken() === $token && $passwordToken->isActive(new \DateTimeImmutable())) {
-                return true;
+                return false;
             }
         }
         return false;
     }
 }


143) /var/www/html/src/Account/Domain/User.php:356    [M] FalseValue

--- Original
+++ New
@@ @@
                 return true;
             }
         }
-        return false;
+        return true;
     }
 }


144) /var/www/html/src/Account/Domain/UserFactory.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public function __construct(private readonly UserPasswordHasherInterface $userPasswordHasher)
     {
     }
-    public function create(string $email, string $password): User
+    protected function create(string $email, string $password): User
     {
         $user = new User();
         $user->setEmail($email);


145) /var/www/html/src/Account/Domain/UserFactory.php:17    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function create(string $email, string $password): User
     {
         $user = new User();
-        $user->setEmail($email);
+        
         $hashedPassword = $this->userPasswordHasher->hashPassword($user, $password);
         $user->setPassword($hashedPassword);
         $user->makeAdmin();


146) /var/www/html/src/Account/Domain/UserFactory.php:22    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $user = new User();
         $user->setEmail($email);
         $hashedPassword = $this->userPasswordHasher->hashPassword($user, $password);
-        $user->setPassword($hashedPassword);
+        
         $user->makeAdmin();
         return $user;
     }
 }


147) /var/www/html/src/Account/Domain/UserFactory.php:23    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $user->setEmail($email);
         $hashedPassword = $this->userPasswordHasher->hashPassword($user, $password);
         $user->setPassword($hashedPassword);
-        $user->makeAdmin();
+        
         return $user;
     }
 }


148) /var/www/html/src/Account/Domain/ValueObject/TotpSecret.php:19    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->secret = $secret;
     }
-    public function isEnable(): bool
+    protected function isEnable(): bool
     {
         return null !== $this->secret;
     }


149) /var/www/html/src/Account/Domain/ValueObject/TotpSecret.php:21    [M] NotIdentical

--- Original
+++ New
@@ @@
     }
     public function isEnable(): bool
     {
-        return null !== $this->secret;
+        return null === $this->secret;
     }
     public function getSecret(): ?string
     {


150) /var/www/html/src/Account/Domain/ValueObject/TotpSecret.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return null !== $this->secret;
     }
-    public function getSecret(): ?string
+    protected function getSecret(): ?string
     {
         return $this->secret;
     }
 }


151) /var/www/html/src/Account/Infrastructure/Rest/PasswordTokenRepository.php:22    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
 {
     public function __construct(ManagerRegistry $registry)
     {
-        parent::__construct($registry, PasswordToken::class);
+        
     }
     public function getByToken(string $token, \DateTimeImmutable $now): ?PasswordToken
     {


152) /var/www/html/src/Account/Infrastructure/Rest/PasswordTokenRepository.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function save(PasswordToken $passwordToken): void
     {
-        $this->getEntityManager()->persist($passwordToken);
+        
         $this->getEntityManager()->flush();
     }
 }


153) /var/www/html/src/Account/Infrastructure/Rest/PasswordTokenRepository.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function save(PasswordToken $passwordToken): void
     {
         $this->getEntityManager()->persist($passwordToken);
-        $this->getEntityManager()->flush();
+        
     }
 }


154) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
 {
     public function __construct(ManagerRegistry $registry)
     {
-        parent::__construct($registry, User::class);
+        
     }
     public function save(User $entity): void
     {


155) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:29    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function save(User $entity): void
     {
-        $this->getEntityManager()->persist($entity);
+        
         $this->getEntityManager()->flush();
     }
     /**


156) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function save(User $entity): void
     {
         $this->getEntityManager()->persist($entity);
-        $this->getEntityManager()->flush();
+        
     }
     /**
      * Used to upgrade (rehash) the user's password automatically over time.


157) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:38    [M] InstanceOf_

--- Original
+++ New
@@ @@
      */
     public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
     {
-        if (!$user instanceof User) {
+        if (!true) {
             throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
         }
         $user->setPassword($newHashedPassword);


158) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:38    [M] InstanceOf_

--- Original
+++ New
@@ @@
      */
     public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
     {
-        if (!$user instanceof User) {
+        if (!false) {
             throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
         }
         $user->setPassword($newHashedPassword);


159) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:38    [M] LogicalNot

--- Original
+++ New
@@ @@
      */
     public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
     {
-        if (!$user instanceof User) {
+        if ($user instanceof User) {
             throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
         }
         $user->setPassword($newHashedPassword);


160) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:39    [M] Throw_

--- Original
+++ New
@@ @@
     public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
     {
         if (!$user instanceof User) {
-            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
+            new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
         }
         $user->setPassword($newHashedPassword);
         $user->setUpdatedAt(new \DateTimeImmutable());


161) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (!$user instanceof User) {
             throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
         }
-        $user->setPassword($newHashedPassword);
+        
         $user->setUpdatedAt(new \DateTimeImmutable());
         $this->save($user);
     }


162) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
         }
         $user->setPassword($newHashedPassword);
-        $user->setUpdatedAt(new \DateTimeImmutable());
+        
         $this->save($user);
     }
     public function getByEmail(string $email): ?User


163) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:45    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $user->setPassword($newHashedPassword);
         $user->setUpdatedAt(new \DateTimeImmutable());
-        $this->save($user);
+        
     }
     public function getByEmail(string $email): ?User
     {


164) /var/www/html/src/Account/Infrastructure/Rest/UserRepository.php:50    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getByEmail(string $email): ?User
     {
-        return $this->findOneBy(['email' => $email]);
+        return $this->findOneBy([]);
     }
 }


165) /var/www/html/src/Account/Ui/AccountController.php:41    [M] TrueValue

--- Original
+++ New
@@ @@
     public function configureActions(Actions $actions): Actions
     {
         /** @phpstan-ignore-next-line  */
-        $fa2Action = true === $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
+        $fa2Action = false === $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
         return parent::configureActions($actions)->remove(Crud::PAGE_EDIT, Action::SAVE_AND_RETURN)->add(Crud::PAGE_EDIT, $fa2Action);
     }
     public function configureFields(string $pageName): iterable


166) /var/www/html/src/Account/Ui/AccountController.php:41    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
     public function configureActions(Actions $actions): Actions
     {
         /** @phpstan-ignore-next-line  */
-        $fa2Action = true === $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
+        $fa2Action = true === $this->getUser()->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
         return parent::configureActions($actions)->remove(Crud::PAGE_EDIT, Action::SAVE_AND_RETURN)->add(Crud::PAGE_EDIT, $fa2Action);
     }
     public function configureFields(string $pageName): iterable


167) /var/www/html/src/Account/Ui/AccountController.php:41    [M] Identical

--- Original
+++ New
@@ @@
     public function configureActions(Actions $actions): Actions
     {
         /** @phpstan-ignore-next-line  */
-        $fa2Action = true === $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
+        $fa2Action = true !== $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
         return parent::configureActions($actions)->remove(Crud::PAGE_EDIT, Action::SAVE_AND_RETURN)->add(Crud::PAGE_EDIT, $fa2Action);
     }
     public function configureFields(string $pageName): iterable


168) /var/www/html/src/Account/Ui/AccountController.php:41    [M] Ternary

--- Original
+++ New
@@ @@
     public function configureActions(Actions $actions): Actions
     {
         /** @phpstan-ignore-next-line  */
-        $fa2Action = true === $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createDisable2FaAction() : $this->createEnable2FaAction();
+        $fa2Action = true === $this->getUser()?->isTotpAuthenticationEnabled() ? $this->createEnable2FaAction() : $this->createDisable2FaAction();
         return parent::configureActions($actions)->remove(Crud::PAGE_EDIT, Action::SAVE_AND_RETURN)->add(Crud::PAGE_EDIT, $fa2Action);
     }
     public function configureFields(string $pageName): iterable


169) /var/www/html/src/Account/Ui/AccountController.php:55    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         $user = $this->getUser();
         yield FormField::addFieldset('admin.account.block.baseData')->setCssClass('col-sm-6');
-        yield EmailField::new('email')->setRequired(true)->onlyOnForms();
+        yield EmailField::new('email')->setRequired(false)->onlyOnForms();
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();


170) /var/www/html/src/Account/Ui/AccountController.php:60    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
         $user = $this->getUser();
         yield FormField::addFieldset('admin.account.block.baseData')->setCssClass('col-sm-6');
         yield EmailField::new('email')->setRequired(true)->onlyOnForms();
-        yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
+        yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
         yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();


171) /var/www/html/src/Account/Ui/AccountController.php:66    [M] FalseValue

--- Original
+++ New
@@ @@
         yield EmailField::new('email')->setRequired(true)->onlyOnForms();
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
-        yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
+        yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(true)->onlyOnForms();
         yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
     }
     public function configureCrud(Crud $crud): Crud


172) /var/www/html/src/Account/Ui/AccountController.php:70    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
-        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
+        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
     }
     public function configureCrud(Crud $crud): Crud
     {


173) /var/www/html/src/Account/Ui/AccountController.php:72    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
-        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
+        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => [], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
     }
     public function configureCrud(Crud $crud): Crud
     {


174) /var/www/html/src/Account/Ui/AccountController.php:73    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
-        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
+        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => [], 'mapped' => false])->setRequired(false)->onlyOnForms();
     }
     public function configureCrud(Crud $crud): Crud
     {


175) /var/www/html/src/Account/Ui/AccountController.php:74    [M] FalseValue

--- Original
+++ New
@@ @@
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
-        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
+        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => true])->setRequired(false)->onlyOnForms();
     }
     public function configureCrud(Crud $crud): Crud
     {


176) /var/www/html/src/Account/Ui/AccountController.php:76    [M] FalseValue

--- Original
+++ New
@@ @@
         yield VichImageField::new('avatarFile', 'admin.account.avatar')->setDownloadUri('public/uploads/images/avatars')->setImageUri(null)->setUploadedFileNamePattern(sprintf('%s-[slug]-[timestamp].[extension]', $user?->getId()));
         yield FormField::addFieldset('admin.account.block.changePassword')->setCssClass('col-sm-6');
         yield TextField::new('actualPassword')->setLabel('admin.account.actualPassword')->setFormType(PasswordType::class)->setRequired(false)->onlyOnForms();
-        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(false)->onlyOnForms();
+        yield TextField::new('password')->setFormType(RepeatedType::class)->setFormTypeOptions(['type' => PasswordType::class, 'first_options' => ['label' => 'admin.account.password'], 'second_options' => ['label' => 'admin.account.confirmPassword'], 'mapped' => false])->setRequired(true)->onlyOnForms();
     }
     public function configureCrud(Crud $crud): Crud
     {


177) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:31    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function supports(Request $request): bool
     {
-        return $request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo();
+        return $request->isMethod('POST') && $this->getLoginUrl($request) !== $request->getPathInfo();
     }
     public function authenticate(Request $request): Passport
     {


178) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function supports(Request $request): bool
     {
-        return $request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo();
+        return $request->isMethod('POST') || $this->getLoginUrl($request) === $request->getPathInfo();
     }
     public function authenticate(Request $request): Passport
     {


179) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:31    [M] LogicalAndAllSubExprNegation

--- Original
+++ New
@@ @@
     }
     public function supports(Request $request): bool
     {
-        return $request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo();
+        return !$request->isMethod('POST') && !($this->getLoginUrl($request) === $request->getPathInfo());
     }
     public function authenticate(Request $request): Passport
     {


180) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:31    [M] LogicalAndNegation

--- Original
+++ New
@@ @@
     }
     public function supports(Request $request): bool
     {
-        return $request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo();
+        return !($request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo());
     }
     public function authenticate(Request $request): Passport
     {


181) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:31    [M] LogicalAndSingleSubExprNegation

--- Original
+++ New
@@ @@
     }
     public function supports(Request $request): bool
     {
-        return $request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo();
+        return !$request->isMethod('POST') && $this->getLoginUrl($request) === $request->getPathInfo();
     }
     public function authenticate(Request $request): Passport
     {


182) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:40    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $loginFormData = $request->request->all('login_form');
         $email = $loginFormData['email'] ?? null;
         $password = $loginFormData['password'] ?? null;
-        $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $email);
+        
         return new Passport(new UserBadge($email), new PasswordCredentials($password), [new CsrfTokenBadge('authenticate', (string) $request->request->get('_csrf_token')), new RememberMeBadge()]);
     }
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response


183) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:45    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $email = $loginFormData['email'] ?? null;
         $password = $loginFormData['password'] ?? null;
         $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $email);
-        return new Passport(new UserBadge($email), new PasswordCredentials($password), [new CsrfTokenBadge('authenticate', (string) $request->request->get('_csrf_token')), new RememberMeBadge()]);
+        return new Passport(new UserBadge($email), new PasswordCredentials($password), [new RememberMeBadge()]);
     }
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {


184) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:46    [M] CastString

--- Original
+++ New
@@ @@
         $email = $loginFormData['email'] ?? null;
         $password = $loginFormData['password'] ?? null;
         $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $email);
-        return new Passport(new UserBadge($email), new PasswordCredentials($password), [new CsrfTokenBadge('authenticate', (string) $request->request->get('_csrf_token')), new RememberMeBadge()]);
+        return new Passport(new UserBadge($email), new PasswordCredentials($password), [new CsrfTokenBadge('authenticate', $request->request->get('_csrf_token')), new RememberMeBadge()]);
     }
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {


185) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:54    [M] FalseValue

--- Original
+++ New
@@ @@
     }
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {
-        if (false === $this->accountAuthenticator->isVerified($request)) {
+        if (true === $this->accountAuthenticator->isVerified($request)) {
             return new RedirectResponse($this->accountAuthenticator->getLoginUrl());
         }
         if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {


186) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:54    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {
-        if (false === $this->accountAuthenticator->isVerified($request)) {
+        if (false !== $this->accountAuthenticator->isVerified($request)) {
             return new RedirectResponse($this->accountAuthenticator->getLoginUrl());
         }
         if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {


187) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:55    [M] NewObject

--- Original
+++ New
@@ @@
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
     {
         if (false === $this->accountAuthenticator->isVerified($request)) {
-            return new RedirectResponse($this->accountAuthenticator->getLoginUrl());
+            new RedirectResponse($this->accountAuthenticator->getLoginUrl());
+            return null;
         }
         if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
             return new RedirectResponse($targetPath);


188) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:59    [M] NewObject

--- Original
+++ New
@@ @@
             return new RedirectResponse($this->accountAuthenticator->getLoginUrl());
         }
         if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
-            return new RedirectResponse($targetPath);
+            new RedirectResponse($targetPath);
+            return null;
         }
         return new RedirectResponse($this->getPanelDashboardUrl());
     }


189) /var/www/html/src/Account/Ui/Authentication/AccountAuthenticator.php:62    [M] NewObject

--- Original
+++ New
@@ @@
         if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
             return new RedirectResponse($targetPath);
         }
-        return new RedirectResponse($this->getPanelDashboardUrl());
+        new RedirectResponse($this->getPanelDashboardUrl());
+        return null;
     }
     protected function getLoginUrl(Request $request): string
     {


190) /var/www/html/src/Account/Ui/Authentication/ForgotPassword/ForgotPasswordController.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->success('dashboard.authentication.resetPassword.email.sent.description', 'dashboard.authentication.resetPassword.email.sent.title');
                 return $this->redirectToRoute('app_login');
             } catch (CannotSendEmailException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.email.error.cannotSendEmail.title');
+                
             } catch (TokenGeneratingFailedException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.email.error.tokenGenerating.title');
             } catch (EmailRequiredException $exception) {


191) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
     }
     #[Route('/dashboard/register', name: 'app_register')]
-    public function register(Request $request): ?Response
+    protected function register(Request $request): ?Response
     {
         $form = $this->createForm(RegistrationFormType::class);
         $form->handleRequest($request);


192) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:29    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function register(Request $request): ?Response
     {
         $form = $this->createForm(RegistrationFormType::class);
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             try {
                 $email = $form->get('email')->getData();


193) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(RegistrationFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();


194) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:31    [M] LogicalAndAllSubExprNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(RegistrationFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if (!$form->isSubmitted() && !$form->isValid()) {
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();


195) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:31    [M] LogicalAndNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(RegistrationFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if (!($form->isSubmitted() && $form->isValid())) {
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();


196) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:31    [M] LogicalAndSingleSubExprNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(RegistrationFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if (!$form->isSubmitted() && $form->isValid()) {
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();


197) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:31    [M] LogicalAndSingleSubExprNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(RegistrationFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() && !$form->isValid()) {
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();


198) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:32    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->createUserService->createUser($email, $password);
                 $this->flasher->success('dashboard.authentication.register.success.description', 'dashboard.authentication.register.success.title');
                 return $this->redirectToRoute('app_login');
-            } catch (EmailRequiredException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.emailRequired.title');
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.passwordRequired.title');
             } catch (\Throwable) {


199) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:32    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('app_login');
             } catch (EmailRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.emailRequired.title');
-            } catch (PasswordRequiredException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.passwordRequired.title');
             } catch (\Throwable) {
                 $this->flasher->error('dashboard.authentication.register.error.description', 'dashboard.authentication.register.error.title');
                 return $this->redirectToRoute('app_register');


200) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:32    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.emailRequired.title');
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.passwordRequired.title');
-            } catch (\Throwable) {
-                $this->flasher->error('dashboard.authentication.register.error.description', 'dashboard.authentication.register.error.title');
-                return $this->redirectToRoute('app_register');
             }
         }
         return $this->render('dashboard/authentication/registration/register.html.twig', ['registrationForm' => $form]);


201) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:36    [M] Identical

--- Original
+++ New
@@ @@
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
-                if (null === $email || false === is_string($email)) {
+                if (null !== $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {


202) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:36    [M] FalseValue

--- Original
+++ New
@@ @@
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
-                if (null === $email || false === is_string($email)) {
+                if (null === $email || true === is_string($email)) {
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {


203) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:36    [M] Identical

--- Original
+++ New
@@ @@
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
-                if (null === $email || false === is_string($email)) {
+                if (null === $email || false !== is_string($email)) {
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {


204) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:36    [M] LogicalOr

--- Original
+++ New
@@ @@
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
-                if (null === $email || false === is_string($email)) {
+                if (null === $email && false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {


205) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:36    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
-                if (null === $email || false === is_string($email)) {
+                if (!(null === $email) || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {


206) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:36    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
             try {
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
-                if (null === $email || false === is_string($email)) {
+                if (!(null === $email || false === is_string($email))) {
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {


207) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:37    [M] Throw_

--- Original
+++ New
@@ @@
                 $email = $form->get('email')->getData();
                 $password = $form->get('password')->getData();
                 if (null === $email || false === is_string($email)) {
-                    throw new EmailRequiredException();
+                    new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();


208) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:40    [M] Identical

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
-                if (null === $password || false === is_string($password)) {
+                if (null !== $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);


209) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:40    [M] FalseValue

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
-                if (null === $password || false === is_string($password)) {
+                if (null === $password || true === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);


210) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:40    [M] Identical

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
-                if (null === $password || false === is_string($password)) {
+                if (null === $password || false !== is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);


211) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:40    [M] LogicalOr

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
-                if (null === $password || false === is_string($password)) {
+                if (null === $password && false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);


212) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:40    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
-                if (null === $password || false === is_string($password)) {
+                if (!(null === $password) || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);


213) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:40    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new EmailRequiredException();
                 }
-                if (null === $password || false === is_string($password)) {
+                if (!(null === $password || false === is_string($password))) {
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);


214) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:41    [M] Throw_

--- Original
+++ New
@@ @@
                     throw new EmailRequiredException();
                 }
                 if (null === $password || false === is_string($password)) {
-                    throw new PasswordRequiredException();
+                    new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);
                 $this->flasher->success('dashboard.authentication.register.success.description', 'dashboard.authentication.register.success.title');


215) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                $this->createUserService->createUser($email, $password);
+                
                 $this->flasher->success('dashboard.authentication.register.success.description', 'dashboard.authentication.register.success.title');
                 return $this->redirectToRoute('app_login');
             } catch (EmailRequiredException $exception) {


216) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     throw new PasswordRequiredException();
                 }
                 $this->createUserService->createUser($email, $password);
-                $this->flasher->success('dashboard.authentication.register.success.description', 'dashboard.authentication.register.success.title');
+                
                 return $this->redirectToRoute('app_login');
             } catch (EmailRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.emailRequired.title');


217) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:55    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->success('dashboard.authentication.register.success.description', 'dashboard.authentication.register.success.title');
                 return $this->redirectToRoute('app_login');
             } catch (EmailRequiredException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.emailRequired.title');
+                
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.passwordRequired.title');
             } catch (\Throwable) {


218) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (EmailRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.emailRequired.title');
             } catch (PasswordRequiredException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.passwordRequired.title');
+                
             } catch (\Throwable) {
                 $this->flasher->error('dashboard.authentication.register.error.description', 'dashboard.authentication.register.error.title');
                 return $this->redirectToRoute('app_register');


219) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.error.passwordRequired.title');
             } catch (\Throwable) {
-                $this->flasher->error('dashboard.authentication.register.error.description', 'dashboard.authentication.register.error.title');
+                
                 return $this->redirectToRoute('app_register');
             }
         }


220) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:73    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('app_register');
             }
         }
-        return $this->render('dashboard/authentication/registration/register.html.twig', ['registrationForm' => $form]);
+        return $this->render('dashboard/authentication/registration/register.html.twig', []);
     }
     #[Route('/dashboard/register/confirm', name: 'app_register_confirm')]
     public function confirmRegistration(Request $request, Security $security): null|Response


221) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:78    [M] PublicVisibility

--- Original
+++ New
@@ @@
         return $this->render('dashboard/authentication/registration/register.html.twig', ['registrationForm' => $form]);
     }
     #[Route('/dashboard/register/confirm', name: 'app_register_confirm')]
-    public function confirmRegistration(Request $request, Security $security): null|Response
+    protected function confirmRegistration(Request $request, Security $security): null|Response
     {
         try {
             $token = $request->get('token');


222) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:81    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
             $user = $this->createUserService->setAsVerified($token);
             $this->flasher->success('dashboard.authentication.register.confirm.success.description', 'dashboard.authentication.register.confirm.success.title');
             return $security->login($user, AccountAuthenticator::class, 'main');
-        } catch (TokenNotFoundException $exception) {
-            $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.confirm.error.tokenNotFound.title');
         } catch (\Throwable) {
             $this->flasher->error('dashboard.authentication.register.confirm.error.description', 'dashboard.authentication.register.confirm.error.title');
             return $this->redirectToRoute('app_register');


223) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:81    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
             return $security->login($user, AccountAuthenticator::class, 'main');
         } catch (TokenNotFoundException $exception) {
             $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.confirm.error.tokenNotFound.title');
-        } catch (\Throwable) {
-            $this->flasher->error('dashboard.authentication.register.confirm.error.description', 'dashboard.authentication.register.confirm.error.title');
-            return $this->redirectToRoute('app_register');
         }
         return $this->redirectToRoute('app_register');
     }
 }


224) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:84    [M] Identical

--- Original
+++ New
@@ @@
     {
         try {
             $token = $request->get('token');
-            if (null === $token || false === is_string($token)) {
+            if (null !== $token || false === is_string($token)) {
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);


225) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:84    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         try {
             $token = $request->get('token');
-            if (null === $token || false === is_string($token)) {
+            if (null === $token || true === is_string($token)) {
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);


226) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:84    [M] Identical

--- Original
+++ New
@@ @@
     {
         try {
             $token = $request->get('token');
-            if (null === $token || false === is_string($token)) {
+            if (null === $token || false !== is_string($token)) {
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);


227) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:84    [M] LogicalOr

--- Original
+++ New
@@ @@
     {
         try {
             $token = $request->get('token');
-            if (null === $token || false === is_string($token)) {
+            if (null === $token && false === is_string($token)) {
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);


228) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:84    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
     {
         try {
             $token = $request->get('token');
-            if (null === $token || false === is_string($token)) {
+            if (!(null === $token) || false === is_string($token)) {
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);


229) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:84    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
     {
         try {
             $token = $request->get('token');
-            if (null === $token || false === is_string($token)) {
+            if (!(null === $token || false === is_string($token))) {
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);


230) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:85    [M] Throw_

--- Original
+++ New
@@ @@
         try {
             $token = $request->get('token');
             if (null === $token || false === is_string($token)) {
-                throw new TokenNotFoundException();
+                new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);
             $this->flasher->success('dashboard.authentication.register.confirm.success.description', 'dashboard.authentication.register.confirm.success.title');


231) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:90    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 throw new TokenNotFoundException();
             }
             $user = $this->createUserService->setAsVerified($token);
-            $this->flasher->success('dashboard.authentication.register.confirm.success.description', 'dashboard.authentication.register.confirm.success.title');
+            
             return $security->login($user, AccountAuthenticator::class, 'main');
         } catch (TokenNotFoundException $exception) {
             $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.confirm.error.tokenNotFound.title');


232) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:97    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->flasher->success('dashboard.authentication.register.confirm.success.description', 'dashboard.authentication.register.confirm.success.title');
             return $security->login($user, AccountAuthenticator::class, 'main');
         } catch (TokenNotFoundException $exception) {
-            $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.confirm.error.tokenNotFound.title');
+            
         } catch (\Throwable) {
             $this->flasher->error('dashboard.authentication.register.confirm.error.description', 'dashboard.authentication.register.confirm.error.title');
             return $this->redirectToRoute('app_register');


233) /var/www/html/src/Account/Ui/Authentication/Registration/RegistrationController.php:102    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         } catch (TokenNotFoundException $exception) {
             $this->flasher->error($exception->getMessage(), 'dashboard.authentication.register.confirm.error.tokenNotFound.title');
         } catch (\Throwable) {
-            $this->flasher->error('dashboard.authentication.register.confirm.error.description', 'dashboard.authentication.register.confirm.error.title');
+            
             return $this->redirectToRoute('app_register');
         }
         return $this->redirectToRoute('app_register');
     }
 }


234) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
     }
     #[Route('/dashboard/reset-password', name: 'app_reset_password')]
-    public function resetPassword(Request $request): Response
+    protected function resetPassword(Request $request): Response
     {
         $form = $this->createForm(ResetPasswordFormType::class);
         $form->handleRequest($request);


235) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function resetPassword(Request $request): Response
     {
         $form = $this->createForm(ResetPasswordFormType::class);
-        $form->handleRequest($request);
+        
         if ($form->isSubmitted() && $form->isValid()) {
             try {
                 $token = $request->get('token');


236) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:30    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(ResetPasswordFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() || $form->isValid()) {
             try {
                 $token = $request->get('token');
                 $email = $request->get('emailValue');


237) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:30    [M] LogicalAndAllSubExprNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(ResetPasswordFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if (!$form->isSubmitted() && !$form->isValid()) {
             try {
                 $token = $request->get('token');
                 $email = $request->get('emailValue');


238) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:30    [M] LogicalAndNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(ResetPasswordFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if (!($form->isSubmitted() && $form->isValid())) {
             try {
                 $token = $request->get('token');
                 $email = $request->get('emailValue');


239) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:30    [M] LogicalAndSingleSubExprNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(ResetPasswordFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if (!$form->isSubmitted() && $form->isValid()) {
             try {
                 $token = $request->get('token');
                 $email = $request->get('emailValue');


240) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:30    [M] LogicalAndSingleSubExprNegation

--- Original
+++ New
@@ @@
     {
         $form = $this->createForm(ResetPasswordFormType::class);
         $form->handleRequest($request);
-        if ($form->isSubmitted() && $form->isValid()) {
+        if ($form->isSubmitted() && !$form->isValid()) {
             try {
                 $token = $request->get('token');
                 $email = $request->get('emailValue');


241) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:31    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->resetPasswordService->resetPassword($token, $email, $password);
                 $this->flasher->success('dashboard.authentication.resetPassword.success.description', 'dashboard.authentication.resetPassword.success.title');
                 return $this->redirectToRoute('app_login');
-            } catch (PasswordRequiredException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.passwordRequired.title');
             } catch (ResetPasswordException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
             } catch (TokenNotFoundException $exception) {


242) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:31    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 return $this->redirectToRoute('app_login');
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.passwordRequired.title');
-            } catch (ResetPasswordException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
             } catch (TokenNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
             } catch (UserNotFoundException $exception) {


243) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:31    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.passwordRequired.title');
             } catch (ResetPasswordException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
-            } catch (TokenNotFoundException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
             } catch (UserNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.userNotFound.title');
             } catch (\Throwable) {


244) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:31    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
             } catch (TokenNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
-            } catch (UserNotFoundException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.userNotFound.title');
             } catch (\Throwable) {
                 $this->flasher->error('dashboard.authentication.resetPassword.error.description', 'dashboard.authentication.resetPassword.error.title');
             }


245) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:31    [M] CatchBlockRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
             } catch (UserNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.userNotFound.title');
-            } catch (\Throwable) {
-                $this->flasher->error('dashboard.authentication.resetPassword.error.description', 'dashboard.authentication.resetPassword.error.title');
             }
         }
         return $this->render('dashboard/authentication/resetPassword/reset-password.html.twig', ['resetPasswordForm' => $form]);
     }
 }


246) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:35    [M] Identical

--- Original
+++ New
@@ @@
                 $token = $request->get('token');
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
-                if (null === $password || false === is_string($password)) {
+                if (null !== $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {


247) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:35    [M] FalseValue

--- Original
+++ New
@@ @@
                 $token = $request->get('token');
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
-                if (null === $password || false === is_string($password)) {
+                if (null === $password || true === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {


248) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:35    [M] Identical

--- Original
+++ New
@@ @@
                 $token = $request->get('token');
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
-                if (null === $password || false === is_string($password)) {
+                if (null === $password || false !== is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {


249) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:35    [M] LogicalOr

--- Original
+++ New
@@ @@
                 $token = $request->get('token');
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
-                if (null === $password || false === is_string($password)) {
+                if (null === $password && false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {


250) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:35    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
                 $token = $request->get('token');
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
-                if (null === $password || false === is_string($password)) {
+                if (!(null === $password) || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {


251) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:35    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
                 $token = $request->get('token');
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
-                if (null === $password || false === is_string($password)) {
+                if (!(null === $password || false === is_string($password))) {
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {


252) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:36    [M] Throw_

--- Original
+++ New
@@ @@
                 $email = $request->get('emailValue');
                 $password = $form->get('password')->getData();
                 if (null === $password || false === is_string($password)) {
-                    throw new PasswordRequiredException();
+                    new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();


253) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:39    [M] Identical

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                if (null === $token || false === is_string($token)) {
+                if (null !== $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {


254) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:39    [M] FalseValue

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                if (null === $token || false === is_string($token)) {
+                if (null === $token || true === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {


255) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:39    [M] Identical

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                if (null === $token || false === is_string($token)) {
+                if (null === $token || false !== is_string($token)) {
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {


256) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:39    [M] LogicalOr

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                if (null === $token || false === is_string($token)) {
+                if (null === $token && false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {


257) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:39    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                if (null === $token || false === is_string($token)) {
+                if (!(null === $token) || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {


258) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:39    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
                 if (null === $password || false === is_string($password)) {
                     throw new PasswordRequiredException();
                 }
-                if (null === $token || false === is_string($token)) {
+                if (!(null === $token || false === is_string($token))) {
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {


259) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:40    [M] Throw_

--- Original
+++ New
@@ @@
                     throw new PasswordRequiredException();
                 }
                 if (null === $token || false === is_string($token)) {
-                    throw new TokenNotFoundException();
+                    new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {
                     throw new UserNotFoundException();


260) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:43    [M] Identical

--- Original
+++ New
@@ @@
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
-                if (null === $email || false === is_string($email)) {
+                if (null !== $email || false === is_string($email)) {
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);


261) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:43    [M] FalseValue

--- Original
+++ New
@@ @@
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
-                if (null === $email || false === is_string($email)) {
+                if (null === $email || true === is_string($email)) {
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);


262) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:43    [M] Identical

--- Original
+++ New
@@ @@
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
-                if (null === $email || false === is_string($email)) {
+                if (null === $email || false !== is_string($email)) {
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);


263) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:43    [M] LogicalOr

--- Original
+++ New
@@ @@
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
-                if (null === $email || false === is_string($email)) {
+                if (null === $email && false === is_string($email)) {
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);


264) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:43    [M] LogicalOrAllSubExprNegation

--- Original
+++ New
@@ @@
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
-                if (null === $email || false === is_string($email)) {
+                if (!(null === $email) || false === is_string($email)) {
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);


265) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:43    [M] LogicalOrNegation

--- Original
+++ New
@@ @@
                 if (null === $token || false === is_string($token)) {
                     throw new TokenNotFoundException();
                 }
-                if (null === $email || false === is_string($email)) {
+                if (!(null === $email || false === is_string($email))) {
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);


266) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:44    [M] Throw_

--- Original
+++ New
@@ @@
                     throw new TokenNotFoundException();
                 }
                 if (null === $email || false === is_string($email)) {
-                    throw new UserNotFoundException();
+                    new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);
                 $this->flasher->success('dashboard.authentication.resetPassword.success.description', 'dashboard.authentication.resetPassword.success.title');


267) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:47    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 if (null === $email || false === is_string($email)) {
                     throw new UserNotFoundException();
                 }
-                $this->resetPasswordService->resetPassword($token, $email, $password);
+                
                 $this->flasher->success('dashboard.authentication.resetPassword.success.description', 'dashboard.authentication.resetPassword.success.title');
                 return $this->redirectToRoute('app_login');
             } catch (PasswordRequiredException $exception) {


268) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     throw new UserNotFoundException();
                 }
                 $this->resetPasswordService->resetPassword($token, $email, $password);
-                $this->flasher->success('dashboard.authentication.resetPassword.success.description', 'dashboard.authentication.resetPassword.success.title');
+                
                 return $this->redirectToRoute('app_login');
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.passwordRequired.title');


269) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:55    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->success('dashboard.authentication.resetPassword.success.description', 'dashboard.authentication.resetPassword.success.title');
                 return $this->redirectToRoute('app_login');
             } catch (PasswordRequiredException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.passwordRequired.title');
+                
             } catch (ResetPasswordException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
             } catch (TokenNotFoundException $exception) {


270) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:60    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (PasswordRequiredException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.passwordRequired.title');
             } catch (ResetPasswordException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
+                
             } catch (TokenNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
             } catch (UserNotFoundException $exception) {


271) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (ResetPasswordException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.resetPassword.title');
             } catch (TokenNotFoundException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
+                
             } catch (UserNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.userNotFound.title');
             } catch (\Throwable) {


272) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:70    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (TokenNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.tokenNotFound.title');
             } catch (UserNotFoundException $exception) {
-                $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.userNotFound.title');
+                
             } catch (\Throwable) {
                 $this->flasher->error('dashboard.authentication.resetPassword.error.description', 'dashboard.authentication.resetPassword.error.title');
             }


273) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:75    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } catch (UserNotFoundException $exception) {
                 $this->flasher->error($exception->getMessage(), 'dashboard.authentication.resetPassword.error.userNotFound.title');
             } catch (\Throwable) {
-                $this->flasher->error('dashboard.authentication.resetPassword.error.description', 'dashboard.authentication.resetPassword.error.title');
+                
             }
         }
         return $this->render('dashboard/authentication/resetPassword/reset-password.html.twig', ['resetPasswordForm' => $form]);
     }
 }


274) /var/www/html/src/Account/Ui/Authentication/ResetPassword/ResetPasswordController.php:84    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $this->flasher->error('dashboard.authentication.resetPassword.error.description', 'dashboard.authentication.resetPassword.error.title');
             }
         }
-        return $this->render('dashboard/authentication/resetPassword/reset-password.html.twig', ['resetPasswordForm' => $form]);
+        return $this->render('dashboard/authentication/resetPassword/reset-password.html.twig', []);
     }
 }


275) /var/www/html/src/Account/Ui/Authentication/Terms/TermsController.php:12    [M] PublicVisibility

--- Original
+++ New
@@ @@
 class TermsController extends AbstractBaseController
 {
     #[Route('/dashboard/terms', name: 'app_terms')]
-    public function showTerms(TranslatorInterface $translator): Response
+    protected function showTerms(TranslatorInterface $translator): Response
     {
         $locale = $translator->getLocale();
         return $this->render($this->getTemplate($locale));
