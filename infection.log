Escaped mutants:
================

1) /var/www/html/src/Account/Application/CreateUserService.php:76    [M] Throw_

--- Original
+++ New
@@ @@
     {
         $passwordToken = $this->passwordTokenRepository->getByToken($token, new \DateTimeImmutable('now'));
         if (null === $passwordToken) {
-            throw new TokenNotFoundException();
+            new TokenNotFoundException();
         }
         try {
             $passwordToken->verify();


2) /var/www/html/src/Account/Application/CreateUserService.php:80    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             throw new TokenNotFoundException();
         }
         try {
-            $passwordToken->verify();
+            
             $user = $passwordToken->getUser();
             $this->passwordTokenRepository->save($passwordToken);
             $this->userRepository->save($user);


3) /var/www/html/src/Account/Domain/PasswordToken.php:82    [M] GreaterThanOrEqualTo

--- Original
+++ New
@@ @@
     }
     public function expiredAtIsInTheFuture(\DateTimeImmutable $now): bool
     {
-        return null !== $this->expiredAt && $this->expiredAt >= $now;
+        return null !== $this->expiredAt && $this->expiredAt > $now;
     }
     /**
      * @throws RandomException


4) /var/www/html/src/Account/Domain/User.php:234    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     public function getTotpAuthenticationConfiguration(): ?TotpConfigurationInterface
     {
-        return new TotpConfiguration($this->totpSecret?->getSecret() ?? '', ...self::TOTP_CONFIGURATION);
+        return new TotpConfiguration('' ?? $this->totpSecret?->getSecret(), ...self::TOTP_CONFIGURATION);
     }
     /**
      * @see UserInterface


5) /var/www/html/src/Account/Domain/User.php:342    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         if (!$this->passwordTokens->contains($passwordToken)) {
             $this->passwordTokens[] = $passwordToken;
-            $passwordToken->setUser($this);
+            
         }
         return $this;
     }


6) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:22    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         $user = $this->getUser();
         $error = $authenticationUtils->getLastAuthenticationError();
-        if (null === $error && $user && false === $user->isVerified()) {
+        if ((null === $error || $user) && false === $user->isVerified()) {
             $resendUrl = $this->generateUrl('app_register_resend_confirmation_email');
             $flasher->error('dashboard.authentication.login.verifyEmail', translateParams: ['%resend_url%' => $resendUrl]);
         }


7) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:28    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $resendUrl = $this->generateUrl('app_register_resend_confirmation_email');
             $flasher->error('dashboard.authentication.login.verifyEmail', translateParams: ['%resend_url%' => $resendUrl]);
         }
-        if ($user && $user->isAdmin() && $user->isVerified()) {
+        if (($user || $user->isAdmin()) && $user->isVerified()) {
             return $this->redirectToRoute(AccountAuthenticatorService::DASHBOARD_ROUTE);
         }
         $lastUsername = $authenticationUtils->getLastUsername();


8) /var/www/html/src/Account/Ui/Authentication/Login/LoginController.php:28    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $resendUrl = $this->generateUrl('app_register_resend_confirmation_email');
             $flasher->error('dashboard.authentication.login.verifyEmail', translateParams: ['%resend_url%' => $resendUrl]);
         }
-        if ($user && $user->isAdmin() && $user->isVerified()) {
+        if ($user && $user->isAdmin() || $user->isVerified()) {
             return $this->redirectToRoute(AccountAuthenticatorService::DASHBOARD_ROUTE);
         }
         $lastUsername = $authenticationUtils->getLastUsername();


9) /var/www/html/src/Company/Application/GusApi/GusApiService.php:54    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         try {
             return $this->saveDataAndGetByCache($tin, $userIp);
         } catch (\Throwable $exception) {
-            $this->logger->error('Error while getting gusData from cache.', ['exception' => $exception]);
+            $this->logger->error('Error while getting gusData from cache.', []);
             throw new CannotGetGusDataException();
         }
     }


10) /var/www/html/src/Company/Application/GusApi/GusApiService.php:98    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $gusApiSearchResult = $this->gusApiSearchResultFactory->createByCompanyDataDto($companyDataDto, $userIp);
             $this->gusApiSearchResultRepository->save($gusApiSearchResult);
         } catch (\Throwable $exception) {
-            $this->logger->error('Error while saving gusApiSearchResult.', ['exception' => $exception]);
+            $this->logger->error('Error while saving gusApiSearchResult.', []);
         }
     }
 }


11) /var/www/html/src/Company/Ui/GusCompanyDataController.php:44    [M] Foreach_

--- Original
+++ New
@@ @@
         $violations = $this->validator->validate($gusDataRequest);
         if (count($violations) > 0) {
             $errorMessages = [];
-            foreach ($violations as $violation) {
+            foreach ([] as $violation) {
                 $errorMessages[] = $violation->getMessage();
             }
             return new JsonResponse(['errors' => $errorMessages], Response::HTTP_UNPROCESSABLE_ENTITY);


12) /var/www/html/src/Company/Ui/GusCompanyDataController.php:47    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             foreach ($violations as $violation) {
                 $errorMessages[] = $violation->getMessage();
             }
-            return new JsonResponse(['errors' => $errorMessages], Response::HTTP_UNPROCESSABLE_ENTITY);
+            return new JsonResponse([], Response::HTTP_UNPROCESSABLE_ENTITY);
         }
         try {
             $companyDataDto = $this->gusDataProvider->getCompanyDataByTin($gusDataRequest->tin, $request->getClientIp());


13) /var/www/html/src/Kernel/CommandManager/CommandManager.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (null === $this->io) {
             throw new \LogicException('SymfonyStyle is not initialized. Call initialize() method first.');
         }
-        $this->io->info($info);
+        
         $this->logger->info($info);
         return $this;
     }


14) /var/www/html/src/Kernel/CommandManager/CommandManager.php:47    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (null === $this->io) {
             throw new \LogicException('SymfonyStyle is not initialized. Call initialize() method first.');
         }
-        $this->io->error($error);
+        
         $this->logger->error($error);
         return $this;
     }


15) /var/www/html/src/Kernel/CommandManager/CommandManager.php:59    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if (null === $this->io) {
             throw new \LogicException('SymfonyStyle is not initialized. Call initialize() method first.');
         }
-        $this->io->success($success);
+        
         $this->logger->info($success);
         return $this;
     }


16) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:47    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
         try {
             $user = $this->security->getUser();
             if (null === $entity->getCreatedBy()) {
-                $entity->setCreatedBy($user?->getUserIdentifier());
+                $entity->setCreatedBy($user->getUserIdentifier());
             }
             $entity->setUpdatedBy($user?->getUserIdentifier());
         } catch (\Throwable $exception) {


17) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:50    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
             if (null === $entity->getCreatedBy()) {
                 $entity->setCreatedBy($user?->getUserIdentifier());
             }
-            $entity->setUpdatedBy($user?->getUserIdentifier());
+            $entity->setUpdatedBy($user->getUserIdentifier());
         } catch (\Throwable $exception) {
             $this->logger->error('Setting user data for resource failed.', ['exception' => $exception, 'class' => TimestampableSubscriber::class]);
         }


18) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if (null === $entity->getCreatedBy()) {
                 $entity->setCreatedBy($user?->getUserIdentifier());
             }
-            $entity->setUpdatedBy($user?->getUserIdentifier());
+            
         } catch (\Throwable $exception) {
             $this->logger->error('Setting user data for resource failed.', ['exception' => $exception, 'class' => TimestampableSubscriber::class]);
         }


19) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:68    [M] InstanceOf_

--- Original
+++ New
@@ @@
     public function preUpdate(LifecycleEventArgs $args): void
     {
         $entity = $args->getObject();
-        if (!$entity instanceof TimestampableResourceInterface) {
+        if (!true) {
             return;
         }
         $entity->setUpdatedAt($this->getDateTimeNow());


20) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:76    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
         $entity->setUpdatedAt($this->getDateTimeNow());
         try {
             $user = $this->security->getUser();
-            $entity->setUpdatedBy($user?->getUserIdentifier());
+            $entity->setUpdatedBy($user->getUserIdentifier());
         } catch (\Throwable $exception) {
             $this->logger->error('Setting user data for resource failed.', ['exception' => $exception, 'class' => TimestampableSubscriber::class]);
         }


21) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:94    [M] InstanceOf_

--- Original
+++ New
@@ @@
     public function preRemove(LifecycleEventArgs $args): void
     {
         $entity = $args->getObject();
-        if (!$entity instanceof TimestampableResourceInterface) {
+        if (!true) {
             return;
         }
         $entity->setDeletedAt($this->getDateTimeNow());


22) /var/www/html/src/Kernel/EventSubscriber/TimestampableSubscriber.php:102    [M] NullSafeMethodCall

--- Original
+++ New
@@ @@
         $entity->setDeletedAt($this->getDateTimeNow());
         try {
             $user = $this->security->getUser();
-            $entity->setDeletedBy($user?->getUserIdentifier());
+            $entity->setDeletedBy($user->getUserIdentifier());
         } catch (\Throwable $exception) {
             $this->logger->error('Setting user data for resource failed.', ['exception' => $exception, 'class' => TimestampableSubscriber::class]);
         }


23) /var/www/html/src/Kernel/Translator/TranslatorUXController.php:34    [M] Identical

--- Original
+++ New
@@ @@
     #[Route('/trans/{key}', name: 'app_translation', methods: ['GET'])]
     public function trans(string $key): JsonResponse
     {
-        $cacheKey = self::ALL === $key ? 'translations_all' : sprintf('translations_%s', $key);
+        $cacheKey = self::ALL !== $key ? 'translations_all' : sprintf('translations_%s', $key);
         $translation = $this->cache->get($cacheKey, function (ItemInterface $item) use ($key) {
             $item->expiresAfter($this->cacheTTl);
             /** @phpstan-ignore-next-line */


24) /var/www/html/src/Kernel/Translator/TranslatorUXController.php:34    [M] Ternary

--- Original
+++ New
@@ @@
     #[Route('/trans/{key}', name: 'app_translation', methods: ['GET'])]
     public function trans(string $key): JsonResponse
     {
-        $cacheKey = self::ALL === $key ? 'translations_all' : sprintf('translations_%s', $key);
+        $cacheKey = self::ALL === $key ? sprintf('translations_%s', $key) : 'translations_all';
         $translation = $this->cache->get($cacheKey, function (ItemInterface $item) use ($key) {
             $item->expiresAfter($this->cacheTTl);
             /** @phpstan-ignore-next-line */


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================
